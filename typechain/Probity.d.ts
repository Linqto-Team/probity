/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ProbityInterface extends ethers.utils.Interface {
  functions: {
    "MIN_COLLATERAL_RATIO()": FunctionFragment;
    "ONE_HUNDRED_PERCENT()": FunctionFragment;
    "addCollateral()": FunctionFragment;
    "closeVault()": FunctionFragment;
    "custodian()": FunctionFragment;
    "getVault()": FunctionFragment;
    "initializeContract()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "openVault(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "registry()": FunctionFragment;
    "teller()": FunctionFragment;
    "treasury()": FunctionFragment;
    "withdrawCollateral(uint256)": FunctionFragment;
    "withdrawEquity(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MIN_COLLATERAL_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONE_HUNDRED_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closeVault",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "custodian", values?: undefined): string;
  encodeFunctionData(functionFragment: "getVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initializeContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "openVault",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(functionFragment: "teller", values?: undefined): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEquity",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MIN_COLLATERAL_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONE_HUNDRED_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "custodian", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "teller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEquity",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "VaultCreated(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultCreated"): EventFragment;
}

export class Probity extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ProbityInterface;

  functions: {
    MIN_COLLATERAL_RATIO(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "MIN_COLLATERAL_RATIO()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    ONE_HUNDRED_PERCENT(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "ONE_HUNDRED_PERCENT()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    addCollateral(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "addCollateral()"(
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    closeVault(overrides?: Overrides): Promise<ContractTransaction>;

    "closeVault()"(overrides?: Overrides): Promise<ContractTransaction>;

    custodian(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "custodian()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getVault(
      overrides?: CallOverrides
    ): Promise<{
      0: {
        index: BigNumber;
        collateral: BigNumber;
        equity: BigNumber;
        debt: BigNumber;
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: number;
      };
    }>;

    "getVault()"(
      overrides?: CallOverrides
    ): Promise<{
      0: {
        index: BigNumber;
        collateral: BigNumber;
        equity: BigNumber;
        debt: BigNumber;
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: number;
      };
    }>;

    initializeContract(overrides?: Overrides): Promise<ContractTransaction>;

    "initializeContract()"(overrides?: Overrides): Promise<ContractTransaction>;

    isOwner(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isOwner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    openVault(
      debt: BigNumberish,
      equity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "openVault(uint256,uint256)"(
      debt: BigNumberish,
      equity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    registry(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "registry()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    teller(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "teller()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    treasury(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "treasury()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    withdrawCollateral(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawCollateral(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawEquity(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawEquity(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  MIN_COLLATERAL_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

  "MIN_COLLATERAL_RATIO()"(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  "ONE_HUNDRED_PERCENT()"(overrides?: CallOverrides): Promise<BigNumber>;

  addCollateral(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "addCollateral()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  closeVault(overrides?: Overrides): Promise<ContractTransaction>;

  "closeVault()"(overrides?: Overrides): Promise<ContractTransaction>;

  custodian(overrides?: CallOverrides): Promise<string>;

  "custodian()"(overrides?: CallOverrides): Promise<string>;

  getVault(
    overrides?: CallOverrides
  ): Promise<{
    index: BigNumber;
    collateral: BigNumber;
    equity: BigNumber;
    debt: BigNumber;
    status: number;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: number;
  }>;

  "getVault()"(
    overrides?: CallOverrides
  ): Promise<{
    index: BigNumber;
    collateral: BigNumber;
    equity: BigNumber;
    debt: BigNumber;
    status: number;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: number;
  }>;

  initializeContract(overrides?: Overrides): Promise<ContractTransaction>;

  "initializeContract()"(overrides?: Overrides): Promise<ContractTransaction>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  openVault(
    debt: BigNumberish,
    equity: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "openVault(uint256,uint256)"(
    debt: BigNumberish,
    equity: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  "registry()"(overrides?: CallOverrides): Promise<string>;

  teller(overrides?: CallOverrides): Promise<string>;

  "teller()"(overrides?: CallOverrides): Promise<string>;

  treasury(overrides?: CallOverrides): Promise<string>;

  "treasury()"(overrides?: CallOverrides): Promise<string>;

  withdrawCollateral(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawCollateral(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawEquity(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawEquity(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    MIN_COLLATERAL_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    "MIN_COLLATERAL_RATIO()"(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    "ONE_HUNDRED_PERCENT()"(overrides?: CallOverrides): Promise<BigNumber>;

    addCollateral(overrides?: CallOverrides): Promise<void>;

    "addCollateral()"(overrides?: CallOverrides): Promise<void>;

    closeVault(overrides?: CallOverrides): Promise<void>;

    "closeVault()"(overrides?: CallOverrides): Promise<void>;

    custodian(overrides?: CallOverrides): Promise<string>;

    "custodian()"(overrides?: CallOverrides): Promise<string>;

    getVault(
      overrides?: CallOverrides
    ): Promise<{
      index: BigNumber;
      collateral: BigNumber;
      equity: BigNumber;
      debt: BigNumber;
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: number;
    }>;

    "getVault()"(
      overrides?: CallOverrides
    ): Promise<{
      index: BigNumber;
      collateral: BigNumber;
      equity: BigNumber;
      debt: BigNumber;
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: number;
    }>;

    initializeContract(overrides?: CallOverrides): Promise<void>;

    "initializeContract()"(overrides?: CallOverrides): Promise<void>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    openVault(
      debt: BigNumberish,
      equity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "openVault(uint256,uint256)"(
      debt: BigNumberish,
      equity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    "registry()"(overrides?: CallOverrides): Promise<string>;

    teller(overrides?: CallOverrides): Promise<string>;

    "teller()"(overrides?: CallOverrides): Promise<string>;

    treasury(overrides?: CallOverrides): Promise<string>;

    "treasury()"(overrides?: CallOverrides): Promise<string>;

    withdrawCollateral(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawCollateral(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawEquity(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawEquity(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    VaultCreated(owner: string | null, vaultId: null): EventFilter;
  };

  estimateGas: {
    MIN_COLLATERAL_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    "MIN_COLLATERAL_RATIO()"(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    "ONE_HUNDRED_PERCENT()"(overrides?: CallOverrides): Promise<BigNumber>;

    addCollateral(overrides?: PayableOverrides): Promise<BigNumber>;

    "addCollateral()"(overrides?: PayableOverrides): Promise<BigNumber>;

    closeVault(overrides?: Overrides): Promise<BigNumber>;

    "closeVault()"(overrides?: Overrides): Promise<BigNumber>;

    custodian(overrides?: CallOverrides): Promise<BigNumber>;

    "custodian()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<BigNumber>;

    "getVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    initializeContract(overrides?: Overrides): Promise<BigNumber>;

    "initializeContract()"(overrides?: Overrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    openVault(
      debt: BigNumberish,
      equity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "openVault(uint256,uint256)"(
      debt: BigNumberish,
      equity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    "registry()"(overrides?: CallOverrides): Promise<BigNumber>;

    teller(overrides?: CallOverrides): Promise<BigNumber>;

    "teller()"(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    "treasury()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawCollateral(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawCollateral(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawEquity(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawEquity(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MIN_COLLATERAL_RATIO(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MIN_COLLATERAL_RATIO()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ONE_HUNDRED_PERCENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ONE_HUNDRED_PERCENT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addCollateral(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "addCollateral()"(
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    closeVault(overrides?: Overrides): Promise<PopulatedTransaction>;

    "closeVault()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    custodian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "custodian()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getVault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initializeContract(overrides?: Overrides): Promise<PopulatedTransaction>;

    "initializeContract()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openVault(
      debt: BigNumberish,
      equity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "openVault(uint256,uint256)"(
      debt: BigNumberish,
      equity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "registry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    teller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "teller()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "treasury()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawCollateral(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawCollateral(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawEquity(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawEquity(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
